# seed_database.py

import random
import datetime
from database import DatabaseManager

# --- Наборы данных для генерации правдоподобных задач ---

VERBS = [
    "Организовать", "Подготовить", "Написать", "Позвонить", "Запланировать",
    "Купить", "Проверить", "Исследовать", "Отправить", "Забронировать",
    "Согласовать", "Оплатить", "Найти", "Завершить", "Проанализировать"
]

NOUNS_WORK = [
    "отчет по продажам", "презентацию для клиента", "коммерческое предложение",
    "встречу с командой", "техническое задание", "маркетинговый план",
    "годовой бюджет", "протокол совещания", "письмо партнерам", "статью для блога"
]

NOUNS_HOME = [
    "продукты на неделю", "билеты в театр", "подарок на день рождения",
    "лампочки для люстры", "фильтр для воды", "ужин для гостей",
    "новый пылесос", "авиабилеты в отпуск", "одежду для спортзала"
]

PEOPLE = [
    "коллеге", "руководителю", "бухгалтеру", "маме", "другу",
    "врачу", "подрядчику", "клиенту", "юристу"
]

TAGS = [
    "Работа", "Дом", "Личное", "Здоровье", "Финансы", "Проект Альфа",
    "Срочно", "Покупки", "Семья", "Обучение", "Автомобиль"
]

# --- Основная функция для наполнения базы данных ---

def seed_database():
    """
    Генерирует и добавляет 100 случайных задач в базу данных.
    """
    db = DatabaseManager()

    # Добавляем одну стартовую, осмысленную задачу
    

    print("Создание 99 случайных задач для наполнения базы...")

    for i in range(99):
        # Выбираем тип задачи (рабочая, личная, звонок)
        task_type = random.choice(['work', 'home', 'call'])
        
        if task_type == 'work':
            title = f"{random.choice(VERBS)} {random.choice(NOUNS_WORK)}"
            details = f"Нужно {title.lower()}. Обратить внимание на сроки и бюджет. Согласовать с отделом маркетинга."
            base_tags = ["Работа"]
        elif task_type == 'home':
            title = f"{random.choice(VERBS)} {random.choice(NOUNS_HOME)}"
            details = f"Не забыть {title.lower()}. Сравнить цены в нескольких магазинах."
            base_tags = ["Дом", "Покупки"]
        else: # call
            title = f"Позвонить {random.choice(PEOPLE)}"
            details = f"Обсудить {random.choice(['проект', 'документы', 'планы на выходные', 'встречу'])}."
            base_tags = ["Личное", "Звонки"]

        # Генерируем случайные теги
        num_extra_tags = random.randint(0, 2)
        extra_tags = random.sample(TAGS, num_extra_tags)
        all_tags = list(set(base_tags + extra_tags)) # Убираем дубликаты
        tags_str = ", ".join(all_tags)
        
        # Генерируем случайную дату выполнения (от -15 до +45 дней от сегодня)
        days_offset = random.randint(-15, 45)
        due_date = (datetime.date.today() + datetime.timedelta(days=days_offset)).isoformat()
        
        # Случайным образом определяем, важна ли задача (вероятность 20%)
        is_important = random.random() < 0.20

        # Добавляем задачу в базу данных
        db.add_task(
            title=title,
            details=details,
            tags=tags_str,
            due_date=due_date,
            is_important=is_important
        )
        print(f"Добавлена задача {i+1}/99: {title[:50]}...")

    db.close()
    print("\nГотово! База данных успешно наполнена 100 задачами.")
    print("Теперь вы можете запустить основной файл main.py")


if __name__ == "__main__":
    # Перед запуском убедитесь, что база данных `tasks.db` не заблокирована
    # другим процессом (например, закройте основное приложение).
    
    # Спросим подтверждение у пользователя
    confirm = input(
        "Этот скрипт добавит 100 тестовых задач в вашу базу данных `tasks.db`.\n"
        "Продолжить? (y/n): "
    )
    if confirm.lower() == 'y':
        seed_database()
    else:
        print("Операция отменена.")